// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: const_message_types.proto

#ifndef PROTOBUF_const_5fmessage_5ftypes_2eproto__INCLUDED
#define PROTOBUF_const_5fmessage_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_const_5fmessage_5ftypes_2eproto();
void protobuf_AssignDesc_const_5fmessage_5ftypes_2eproto();
void protobuf_ShutdownFile_const_5fmessage_5ftypes_2eproto();


enum MessageTypes {
  MESSAGE_NONE = 0,
  MESSAGE_CS_AUTH_CHALLENGE = 1,
  MESSAGE_SC_AUTH_CHALLENGE = 2,
  MESSAGE_CS_AUTH_PROOF = 3,
  MESSAGE_SC_AUTH_PROOF = 4,
  MESSAGE_CS_SERVER_CHALLENGE_REQUEST = 5,
  MESSAGE_SC_SERVER_CHALLENGE_ACK = 6,
  MESSAGE_CS_SERVER_SESSION_NEW = 7,
  MESSAGE_SC_SERVER_SESSION_NEW = 8,
  MESSAGE_CS_SERVER_SESSION_CLOSE = 9,
  MESSAGE_SC_SERVER_SESSION_CLOSE = 10,
  MESSAGE_CS_LOGOUT_REQ = 52,
  MESSAGE_SC_RET_LOGOUT = 53,
  MESSAGE_RET_REQ_RESULT = 100
};
bool MessageTypes_IsValid(int value);
const MessageTypes MessageTypes_MIN = MESSAGE_NONE;
const MessageTypes MessageTypes_MAX = MESSAGE_RET_REQ_RESULT;
const int MessageTypes_ARRAYSIZE = MessageTypes_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageTypes_descriptor();
inline const ::std::string& MessageTypes_Name(MessageTypes value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageTypes_descriptor(), value);
}
inline bool MessageTypes_Parse(
    const ::std::string& name, MessageTypes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageTypes>(
    MessageTypes_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< hammer::message::MessageTypes>() {
  return hammer::message::MessageTypes_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_const_5fmessage_5ftypes_2eproto__INCLUDED
