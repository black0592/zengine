// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sc_server_challeng_ack.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SCServerChallengeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCServerChallengeAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sc_5fserver_5fchalleng_5fack_2eproto() {
  protobuf_AddDesc_sc_5fserver_5fchalleng_5fack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sc_server_challeng_ack.proto");
  GOOGLE_CHECK(file != NULL);
  SCServerChallengeAck_descriptor_ = file->message_type(0);
  static const int SCServerChallengeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCServerChallengeAck, ret_code_),
  };
  SCServerChallengeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCServerChallengeAck_descriptor_,
      SCServerChallengeAck::default_instance_,
      SCServerChallengeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCServerChallengeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCServerChallengeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCServerChallengeAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sc_5fserver_5fchalleng_5fack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCServerChallengeAck_descriptor_, &SCServerChallengeAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sc_5fserver_5fchalleng_5fack_2eproto() {
  delete SCServerChallengeAck::default_instance_;
  delete SCServerChallengeAck_reflection_;
}

void protobuf_AddDesc_sc_5fserver_5fchalleng_5fack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034sc_server_challeng_ack.proto\022\016hammer.m"
    "essage\"(\n\024SCServerChallengeAck\022\020\n\010ret_co"
    "de\030\001 \002(\005B\022\n\016hammer.messageH\002", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sc_server_challeng_ack.proto", &protobuf_RegisterTypes);
  SCServerChallengeAck::default_instance_ = new SCServerChallengeAck();
  SCServerChallengeAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sc_5fserver_5fchalleng_5fack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sc_5fserver_5fchalleng_5fack_2eproto {
  StaticDescriptorInitializer_sc_5fserver_5fchalleng_5fack_2eproto() {
    protobuf_AddDesc_sc_5fserver_5fchalleng_5fack_2eproto();
  }
} static_descriptor_initializer_sc_5fserver_5fchalleng_5fack_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SCServerChallengeAck::kRetCodeFieldNumber;
#endif  // !_MSC_VER

SCServerChallengeAck::SCServerChallengeAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCServerChallengeAck::InitAsDefaultInstance() {
}

SCServerChallengeAck::SCServerChallengeAck(const SCServerChallengeAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCServerChallengeAck::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCServerChallengeAck::~SCServerChallengeAck() {
  SharedDtor();
}

void SCServerChallengeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCServerChallengeAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCServerChallengeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCServerChallengeAck_descriptor_;
}

const SCServerChallengeAck& SCServerChallengeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sc_5fserver_5fchalleng_5fack_2eproto();  return *default_instance_;
}

SCServerChallengeAck* SCServerChallengeAck::default_instance_ = NULL;

SCServerChallengeAck* SCServerChallengeAck::New() const {
  return new SCServerChallengeAck;
}

void SCServerChallengeAck::Swap(SCServerChallengeAck* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SCServerChallengeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCServerChallengeAck_descriptor_;
  metadata.reflection = SCServerChallengeAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

// @@protoc_insertion_point(global_scope)
