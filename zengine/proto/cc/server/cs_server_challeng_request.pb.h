// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_server_challeng_request.proto

#ifndef PROTOBUF_cs_5fserver_5fchalleng_5frequest_2eproto__INCLUDED
#define PROTOBUF_cs_5fserver_5fchalleng_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fserver_5fchalleng_5frequest_2eproto();
void protobuf_AssignDesc_cs_5fserver_5fchalleng_5frequest_2eproto();
void protobuf_ShutdownFile_cs_5fserver_5fchalleng_5frequest_2eproto();

class CSServerChallengeRequest;

// ===================================================================

class CSServerChallengeRequest : public ::google::protobuf::Message {
 public:
  CSServerChallengeRequest();
  virtual ~CSServerChallengeRequest();
  
  CSServerChallengeRequest(const CSServerChallengeRequest& from);
  
  inline CSServerChallengeRequest& operator=(const CSServerChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSServerChallengeRequest& default_instance();
  
  void Swap(CSServerChallengeRequest* other);
  
  // implements Message ----------------------------------------------
  
  CSServerChallengeRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string remote_password = 2;
  inline bool has_remote_password() const;
  inline void clear_remote_password();
  static const int kRemotePasswordFieldNumber = 2;
  inline const ::std::string& remote_password() const;
  inline void set_remote_password(const ::std::string& value);
  inline void set_remote_password(const char* value);
  inline void set_remote_password(const char* value, size_t size);
  inline ::std::string* mutable_remote_password();
  
  // @@protoc_insertion_point(class_scope:hammer.message.CSServerChallengeRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* remote_password_;
  static const ::std::string _default_remote_password_;
  friend void  protobuf_AddDesc_cs_5fserver_5fchalleng_5frequest_2eproto();
  friend void protobuf_AssignDesc_cs_5fserver_5fchalleng_5frequest_2eproto();
  friend void protobuf_ShutdownFile_cs_5fserver_5fchalleng_5frequest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CSServerChallengeRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// CSServerChallengeRequest

// required string name = 1;
inline bool CSServerChallengeRequest::has_name() const {
  return _has_bit(0);
}
inline void CSServerChallengeRequest::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CSServerChallengeRequest::name() const {
  return *name_;
}
inline void CSServerChallengeRequest::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSServerChallengeRequest::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSServerChallengeRequest::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSServerChallengeRequest::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string remote_password = 2;
inline bool CSServerChallengeRequest::has_remote_password() const {
  return _has_bit(1);
}
inline void CSServerChallengeRequest::clear_remote_password() {
  if (remote_password_ != &_default_remote_password_) {
    remote_password_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CSServerChallengeRequest::remote_password() const {
  return *remote_password_;
}
inline void CSServerChallengeRequest::set_remote_password(const ::std::string& value) {
  _set_bit(1);
  if (remote_password_ == &_default_remote_password_) {
    remote_password_ = new ::std::string;
  }
  remote_password_->assign(value);
}
inline void CSServerChallengeRequest::set_remote_password(const char* value) {
  _set_bit(1);
  if (remote_password_ == &_default_remote_password_) {
    remote_password_ = new ::std::string;
  }
  remote_password_->assign(value);
}
inline void CSServerChallengeRequest::set_remote_password(const char* value, size_t size) {
  _set_bit(1);
  if (remote_password_ == &_default_remote_password_) {
    remote_password_ = new ::std::string;
  }
  remote_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSServerChallengeRequest::mutable_remote_password() {
  _set_bit(1);
  if (remote_password_ == &_default_remote_password_) {
    remote_password_ = new ::std::string;
  }
  return remote_password_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fserver_5fchalleng_5frequest_2eproto__INCLUDED
