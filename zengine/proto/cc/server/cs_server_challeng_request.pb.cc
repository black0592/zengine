// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_server_challeng_request.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

namespace {

const ::google::protobuf::Descriptor* CSServerChallengeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSServerChallengeRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fserver_5fchalleng_5frequest_2eproto() {
  protobuf_AddDesc_cs_5fserver_5fchalleng_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_server_challeng_request.proto");
  GOOGLE_CHECK(file != NULL);
  CSServerChallengeRequest_descriptor_ = file->message_type(0);
  static const int CSServerChallengeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerChallengeRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerChallengeRequest, remote_password_),
  };
  CSServerChallengeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSServerChallengeRequest_descriptor_,
      CSServerChallengeRequest::default_instance_,
      CSServerChallengeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerChallengeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSServerChallengeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSServerChallengeRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fserver_5fchalleng_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSServerChallengeRequest_descriptor_, &CSServerChallengeRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fserver_5fchalleng_5frequest_2eproto() {
  delete CSServerChallengeRequest::default_instance_;
  delete CSServerChallengeRequest_reflection_;
}

void protobuf_AddDesc_cs_5fserver_5fchalleng_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n cs_server_challeng_request.proto\022\016hamm"
    "er.message\"A\n\030CSServerChallengeRequest\022\014"
    "\n\004name\030\001 \002(\t\022\027\n\017remote_password\030\002 \002(\tB\022\n"
    "\016hammer.messageH\002", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_server_challeng_request.proto", &protobuf_RegisterTypes);
  CSServerChallengeRequest::default_instance_ = new CSServerChallengeRequest();
  CSServerChallengeRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fserver_5fchalleng_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fserver_5fchalleng_5frequest_2eproto {
  StaticDescriptorInitializer_cs_5fserver_5fchalleng_5frequest_2eproto() {
    protobuf_AddDesc_cs_5fserver_5fchalleng_5frequest_2eproto();
  }
} static_descriptor_initializer_cs_5fserver_5fchalleng_5frequest_2eproto_;


// ===================================================================

const ::std::string CSServerChallengeRequest::_default_name_;
const ::std::string CSServerChallengeRequest::_default_remote_password_;
#ifndef _MSC_VER
const int CSServerChallengeRequest::kNameFieldNumber;
const int CSServerChallengeRequest::kRemotePasswordFieldNumber;
#endif  // !_MSC_VER

CSServerChallengeRequest::CSServerChallengeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSServerChallengeRequest::InitAsDefaultInstance() {
}

CSServerChallengeRequest::CSServerChallengeRequest(const CSServerChallengeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSServerChallengeRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  remote_password_ = const_cast< ::std::string*>(&_default_remote_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSServerChallengeRequest::~CSServerChallengeRequest() {
  SharedDtor();
}

void CSServerChallengeRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (remote_password_ != &_default_remote_password_) {
    delete remote_password_;
  }
  if (this != default_instance_) {
  }
}

void CSServerChallengeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSServerChallengeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSServerChallengeRequest_descriptor_;
}

const CSServerChallengeRequest& CSServerChallengeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fserver_5fchalleng_5frequest_2eproto();  return *default_instance_;
}

CSServerChallengeRequest* CSServerChallengeRequest::default_instance_ = NULL;

CSServerChallengeRequest* CSServerChallengeRequest::New() const {
  return new CSServerChallengeRequest;
}

void CSServerChallengeRequest::Swap(CSServerChallengeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata CSServerChallengeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSServerChallengeRequest_descriptor_;
  metadata.reflection = CSServerChallengeRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

// @@protoc_insertion_point(global_scope)
