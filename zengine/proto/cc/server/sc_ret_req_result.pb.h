// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sc_ret_req_result.proto

#ifndef PROTOBUF_sc_5fret_5freq_5fresult_2eproto__INCLUDED
#define PROTOBUF_sc_5fret_5freq_5fresult_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sc_5fret_5freq_5fresult_2eproto();
void protobuf_AssignDesc_sc_5fret_5freq_5fresult_2eproto();
void protobuf_ShutdownFile_sc_5fret_5freq_5fresult_2eproto();

class SCRetReqResult;

// ===================================================================

class SCRetReqResult : public ::google::protobuf::Message {
 public:
  SCRetReqResult();
  virtual ~SCRetReqResult();
  
  SCRetReqResult(const SCRetReqResult& from);
  
  inline SCRetReqResult& operator=(const SCRetReqResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SCRetReqResult& default_instance();
  
  void Swap(SCRetReqResult* other);
  
  // implements Message ----------------------------------------------
  
  SCRetReqResult* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 message_type = 1;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 message_type() const;
  inline void set_message_type(::google::protobuf::uint32 value);
  
  // required int32 ec = 2;
  inline bool has_ec() const;
  inline void clear_ec();
  static const int kEcFieldNumber = 2;
  inline ::google::protobuf::int32 ec() const;
  inline void set_ec(::google::protobuf::int32 value);
  
  // optional string error_string = 3;
  inline bool has_error_string() const;
  inline void clear_error_string();
  static const int kErrorStringFieldNumber = 3;
  inline const ::std::string& error_string() const;
  inline void set_error_string(const ::std::string& value);
  inline void set_error_string(const char* value);
  inline void set_error_string(const char* value, size_t size);
  inline ::std::string* mutable_error_string();
  
  // @@protoc_insertion_point(class_scope:hammer.message.SCRetReqResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 message_type_;
  ::google::protobuf::int32 ec_;
  ::std::string* error_string_;
  static const ::std::string _default_error_string_;
  friend void  protobuf_AddDesc_sc_5fret_5freq_5fresult_2eproto();
  friend void protobuf_AssignDesc_sc_5fret_5freq_5fresult_2eproto();
  friend void protobuf_ShutdownFile_sc_5fret_5freq_5fresult_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SCRetReqResult* default_instance_;
};
// ===================================================================


// ===================================================================

// SCRetReqResult

// required uint32 message_type = 1;
inline bool SCRetReqResult::has_message_type() const {
  return _has_bit(0);
}
inline void SCRetReqResult::clear_message_type() {
  message_type_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 SCRetReqResult::message_type() const {
  return message_type_;
}
inline void SCRetReqResult::set_message_type(::google::protobuf::uint32 value) {
  _set_bit(0);
  message_type_ = value;
}

// required int32 ec = 2;
inline bool SCRetReqResult::has_ec() const {
  return _has_bit(1);
}
inline void SCRetReqResult::clear_ec() {
  ec_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SCRetReqResult::ec() const {
  return ec_;
}
inline void SCRetReqResult::set_ec(::google::protobuf::int32 value) {
  _set_bit(1);
  ec_ = value;
}

// optional string error_string = 3;
inline bool SCRetReqResult::has_error_string() const {
  return _has_bit(2);
}
inline void SCRetReqResult::clear_error_string() {
  if (error_string_ != &_default_error_string_) {
    error_string_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SCRetReqResult::error_string() const {
  return *error_string_;
}
inline void SCRetReqResult::set_error_string(const ::std::string& value) {
  _set_bit(2);
  if (error_string_ == &_default_error_string_) {
    error_string_ = new ::std::string;
  }
  error_string_->assign(value);
}
inline void SCRetReqResult::set_error_string(const char* value) {
  _set_bit(2);
  if (error_string_ == &_default_error_string_) {
    error_string_ = new ::std::string;
  }
  error_string_->assign(value);
}
inline void SCRetReqResult::set_error_string(const char* value, size_t size) {
  _set_bit(2);
  if (error_string_ == &_default_error_string_) {
    error_string_ = new ::std::string;
  }
  error_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCRetReqResult::mutable_error_string() {
  _set_bit(2);
  if (error_string_ == &_default_error_string_) {
    error_string_ = new ::std::string;
  }
  return error_string_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sc_5fret_5freq_5fresult_2eproto__INCLUDED
