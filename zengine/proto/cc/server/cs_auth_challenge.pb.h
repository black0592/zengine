// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_auth_challenge.proto

#ifndef PROTOBUF_cs_5fauth_5fchallenge_2eproto__INCLUDED
#define PROTOBUF_cs_5fauth_5fchallenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fauth_5fchallenge_2eproto();
void protobuf_AssignDesc_cs_5fauth_5fchallenge_2eproto();
void protobuf_ShutdownFile_cs_5fauth_5fchallenge_2eproto();

class CSAuthChallenge;

// ===================================================================

class CSAuthChallenge : public ::google::protobuf::Message {
 public:
  CSAuthChallenge();
  virtual ~CSAuthChallenge();
  
  CSAuthChallenge(const CSAuthChallenge& from);
  
  inline CSAuthChallenge& operator=(const CSAuthChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSAuthChallenge& default_instance();
  
  void Swap(CSAuthChallenge* other);
  
  // implements Message ----------------------------------------------
  
  CSAuthChallenge* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  
  // @@protoc_insertion_point(class_scope:hammer.message.CSAuthChallenge)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* uname_;
  static const ::std::string _default_uname_;
  friend void  protobuf_AddDesc_cs_5fauth_5fchallenge_2eproto();
  friend void protobuf_AssignDesc_cs_5fauth_5fchallenge_2eproto();
  friend void protobuf_ShutdownFile_cs_5fauth_5fchallenge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CSAuthChallenge* default_instance_;
};
// ===================================================================


// ===================================================================

// CSAuthChallenge

// required string uname = 1;
inline bool CSAuthChallenge::has_uname() const {
  return _has_bit(0);
}
inline void CSAuthChallenge::clear_uname() {
  if (uname_ != &_default_uname_) {
    uname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CSAuthChallenge::uname() const {
  return *uname_;
}
inline void CSAuthChallenge::set_uname(const ::std::string& value) {
  _set_bit(0);
  if (uname_ == &_default_uname_) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void CSAuthChallenge::set_uname(const char* value) {
  _set_bit(0);
  if (uname_ == &_default_uname_) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void CSAuthChallenge::set_uname(const char* value, size_t size) {
  _set_bit(0);
  if (uname_ == &_default_uname_) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSAuthChallenge::mutable_uname() {
  _set_bit(0);
  if (uname_ == &_default_uname_) {
    uname_ = new ::std::string;
  }
  return uname_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fauth_5fchallenge_2eproto__INCLUDED
