// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sc_auth_challenge.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hammer {
namespace message {

namespace {

const ::google::protobuf::Descriptor* SCAuthChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCAuthChallenge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sc_5fauth_5fchallenge_2eproto() {
  protobuf_AddDesc_sc_5fauth_5fchallenge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sc_auth_challenge.proto");
  GOOGLE_CHECK(file != NULL);
  SCAuthChallenge_descriptor_ = file->message_type(0);
  static const int SCAuthChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAuthChallenge, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAuthChallenge, hash_key_),
  };
  SCAuthChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCAuthChallenge_descriptor_,
      SCAuthChallenge::default_instance_,
      SCAuthChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAuthChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAuthChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCAuthChallenge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sc_5fauth_5fchallenge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCAuthChallenge_descriptor_, &SCAuthChallenge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sc_5fauth_5fchallenge_2eproto() {
  delete SCAuthChallenge::default_instance_;
  delete SCAuthChallenge_reflection_;
}

void protobuf_AddDesc_sc_5fauth_5fchallenge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027sc_auth_challenge.proto\022\016hammer.messag"
    "e\"5\n\017SCAuthChallenge\022\020\n\010ret_code\030\001 \002(\005\022\020"
    "\n\010hash_key\030\002 \001(\tB\022\n\016hammer.messageH\002", 116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sc_auth_challenge.proto", &protobuf_RegisterTypes);
  SCAuthChallenge::default_instance_ = new SCAuthChallenge();
  SCAuthChallenge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sc_5fauth_5fchallenge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sc_5fauth_5fchallenge_2eproto {
  StaticDescriptorInitializer_sc_5fauth_5fchallenge_2eproto() {
    protobuf_AddDesc_sc_5fauth_5fchallenge_2eproto();
  }
} static_descriptor_initializer_sc_5fauth_5fchallenge_2eproto_;


// ===================================================================

const ::std::string SCAuthChallenge::_default_hash_key_;
#ifndef _MSC_VER
const int SCAuthChallenge::kRetCodeFieldNumber;
const int SCAuthChallenge::kHashKeyFieldNumber;
#endif  // !_MSC_VER

SCAuthChallenge::SCAuthChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCAuthChallenge::InitAsDefaultInstance() {
}

SCAuthChallenge::SCAuthChallenge(const SCAuthChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCAuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  hash_key_ = const_cast< ::std::string*>(&_default_hash_key_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCAuthChallenge::~SCAuthChallenge() {
  SharedDtor();
}

void SCAuthChallenge::SharedDtor() {
  if (hash_key_ != &_default_hash_key_) {
    delete hash_key_;
  }
  if (this != default_instance_) {
  }
}

void SCAuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCAuthChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAuthChallenge_descriptor_;
}

const SCAuthChallenge& SCAuthChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sc_5fauth_5fchallenge_2eproto();  return *default_instance_;
}

SCAuthChallenge* SCAuthChallenge::default_instance_ = NULL;

SCAuthChallenge* SCAuthChallenge::New() const {
  return new SCAuthChallenge;
}

void SCAuthChallenge::Swap(SCAuthChallenge* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SCAuthChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCAuthChallenge_descriptor_;
  metadata.reflection = SCAuthChallenge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace hammer

// @@protoc_insertion_point(global_scope)
